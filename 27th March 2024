1st Thing. 2-3 Coding Questions.

Move All the Zeros to the end.
Brute force approach.
#include <iostream>
using namespace std;
void moveZeros(int arr[], int n) {
  int temp[n];
  int j = 0;
  for(int i=0;i<n;i++) {
    if(arr[i] != 0) {
      temp[j] = arr[i];
      j++;
    }
  }
  int nz = j;
  for(int i=0;i<nz;i++) {
    arr[i] = temp[i];
  }
  for(int i=nz;i<n;i++) {
    arr[i] = 0;
  }
  for(int i=0;i<n;i++) {
    cout<<arr[i]<<" ";
  }
  cout<<endl;
}
int main() 
{
    int arr[] = {1, 0, 2, 3, 2, 0, 0, 4, 5, 1};
    int n = sizeof(arr)/sizeof(arr[0]);
    moveZeros(arr, n);
    return 0;
}

Optimal approach.
#include <bits/stdc++.h>
using namespace std;
vector<int> moveZeors(int n, vector<int> a) {
  int j = -1;
  for(int i=0;i<n;i++) {
    if(a[i] == 0) {
      j = i;
      break;
    }
  }
  if(j == -1) return a;
  for(int i=j+1;i<n;i++) {
    if(a[i] != 0) {
      swap(a[i], a[j]);
      j++;
    }
  }
  return a;
}
int main() 
{
    vector<int> arr = {1,0,2,3,2,0,0,4,5,1};
    int n = arr.size();
    vector<int> ans = moveZeors(n, arr);
    for(auto &it: ans) {
      cout<<it<<" ";
    }
    cout<<endl;
    return 0;
}

optimal approach -> 

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        
        int j = 0;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] != 0){
                nums[j++] = nums[i];
            }
        }
        
        for(int i = j; i < nums.size(); i++){
            nums[i] = 0;
        }
        
    }
};

Video 76. Web Developement.
Here, I have 2 Files.
index.html, script.js

index.html->
<!-- Promise is a promise of code execution. -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <script src="script.js"></script>
  </body>
</html>

script.js -> 
// This getData function will fetch data from server. But how much time will it take, how we will know this ? We will not be able to know.
// function getData() {
//     return new Promise((resolve, reject) => {
//         setTimeout(() => {
//             resolve(455);
//         }, 3500);
//     })
// }

// Settle means resolve or reject.
// resolve means promise has settled successfully.
// Reject means Promise has not settled successfully.

// Suppose we are doing so many things.
// console.log("Loading modules")
// console.log("Do something else.")
// console.log("Load Data")
// let data = getData() // Here we are creating a promise. This data will take time to load, that is the reason why it is writterning a promise.
// If I want that this function will always bring the data but the work which we have defined below will not stop. Whatever we are doing below.
// Basically we are trying to control Asynchronous JavaScript.
// If we want nothing will get executed after the above function gets executed -> So here what we can do is we can use async/await function. 
// One way to do this is use below then function.
// data.then((v)=>{
//     console.log(data)
//     console.log("Process Data")
// })

// But async/await is introduced so that we do not have to use the above then method.
// So instead of writing a simple function, we can make our function async. Async function means, that this function will run in background.

// async function getData() {
//     return new Promise((resolve, reject) => {
//         setTimeout(() => {
//             resolve(455);
//         }, 3500);
//     })
// }

// Fetch API ko 2 baar await karke paas karna padhta hai. Because Fetch API will return this below promise and then we parse it and it will again return a promise.
// Data lane ki promise, then data parse karne ki promise.
async function getData() {
    // We will understand the concept of fetchAPI.
    let x = await fetch('https://jsonplaceholder.typicode.com/todos/1')
    let data = await x.json()
    console.log(data)
}


async function main() {
    console.log("Loading modules")
    console.log("Do something else")
    console.log("Load data")
    let data = await getData() // If we would not have writtern await, then it would have put this function in background and run the below codes.
    console.log(data)
    console.log("Process data")
    console.log("Task 2")
}
main()

// Settle means resolve or reject.
// resolve means promise has settled successfully.
// Reject means, Promise has not settled successfully.

// GET Request: GET Request means when we write something within our url, we are making a GET Request.
// POST Request: POST Request means when we submit some information from some form or something else.
// PUT Request: PUT Request is for updating the data.
// DELETE Request: DELETE request is to delete something on server.
// OPTIONS Request: IT is used to fetch meta data.


