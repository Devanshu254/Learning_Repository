It is divide and conquer algorithm.
It is stable algorithm.
Theta(n logn) time is needed and O(n) aux space.
Well Suited For Linkdlist. Works in O(1).
Used in External sorting.
In General For it, Quick Sort outperforms it.

// Naive Solution: Create another temp array and place both arr1 and arr2 within temp array and then sort it.
Time Complexity: O((m+n)*log(m+n)). 
Aux Space: Theta(m+n).

#include<bits/stdc++.h>
using namespace std;
void MergeTwoSortedArrays(int arr1[], int arr2[], int n, int m) {
    int temp[n+m];
    for(int i=0;i<n;i++) {
        temp[i] = arr1[i];
    }
    for(int j=0;j<m;j++) {
        temp[n+j] = arr2[j];
    }
    sort(temp, temp+n+m);
    for(int i=0;i<m+n;i++) {
        cout<<temp[i]<<" ";
    }
} 
int main() {
    int arr1[] = {10, 15, 20};
    int arr2[] = {5, 6, 6, 15};
    int N = sizeof(arr1)/sizeof(arr1[0]);
    int M = sizeof(arr2)/sizeof(arr2[0]);
    MergeTwoSortedArrays(arr1, arr2, N, M);
    return 0;
}


