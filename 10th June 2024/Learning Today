Abstraction vs Encapsulation with coding example.

Some theory.
Abstraction is a process of hiding the implementation details and showing only the functionality to the user. 
In other words, it deals with the outside view of an object (interface).

Encapsulation is a process of wrapping code and data together into a single unit. 
It binds together the data and functions that manipulate the data.

#include<iostream>
using namespace std;

// Abstraction
class AbstractEmployee {
   virtual void AskForPromotion() = 0; // pure virtual function making this class Abstract class
};

// Encapsulation
class Employee:AbstractEmployee {
private:
    string Name; // private attribute
    string Company;
    int Age;
public:
    void setName(string name) {
        Name = name;
    }
    string getName() {
        return Name;
    }
    void setCompany(string company) {
        Company = company;
    }
    string getCompany() {
        return Company;
    }
    void setAge(int age) {
        if(age >= 18)
            Age = age;
    }
    int getAge() {
        return Age;
    }

    void IntroduceYourself() {
        cout<<"Name - "<<Name<<endl;
        cout<<"Company - "<<Company<<endl;
        cout<<"Age - "<<Age<<endl;
    }

    Employee(string name, string company, int age) {
        Name = name;
        Company = company;
        Age = age;
    }

    void AskForPromotion() {
        if(Age > 30)
            cout<<Name<<" got promoted!"<<endl;
        else
            cout<<Name<<", sorry No promotion for you!"<<endl;
    }
};

int main() {
    Employee employee1 = Employee("Saldina", "YT-CodeBeauty", 25);
    employee1.IntroduceYourself();
    employee1.AskForPromotion();

    Employee employee2 = Employee("John", "Amazon", 35);
    employee2.IntroduceYourself();
    employee2.AskForPromotion();

    return 0;
}
