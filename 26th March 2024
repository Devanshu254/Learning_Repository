Today Headlines.
1. First I did 3-4 Questions of DSA Striver Sheet.
2. Then I watched and Implemented 74th Video of sigma Web Dev series which is on events, events bubbling, set interval, set time out.
3. Then Watched and Implemented video 75th of Web Dev. Here, We have JavaScript Callbacks and Promises concept. And also discussed 
about the asynchornous behaviour of javascript.

Tutorial - 74.
3 Files.
index.html
script.js
eventsbubbling.html

index.html -> 
<!-- There are lot of events in JavaScript like We can click on an element, or we can double click on an element, we can take mouse within an element or out of an element. -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <div class="container">
      <div class="box">Hey I am a box.</div>
    </div>
    <button id="btn">Change Content</button>
    <script src="script.js"></script>
  </body>
</html>

script.js ->
let button = document.getElementById("btn")
// button.addEventListener("click", ()=>{
//     alert("I was clicked! yayy.")
//     document.querySelector(".box").innerHTML = "Yeyy, You were clicked."
// })

button.addEventListener("dblclick", ()=>{
    document.querySelector(".box").innerHTML = "Yes, you will get changed."
})

button.addEventListener("contextmenu", ()=>{
    alert("Right click please.")
})

button.addEventListener("keyup", (e)=> { // keyboard keys take events object as parameter.
    alert("Yes, you have entered keyup comand. Good.")
}) // After clicking on the place where we are applying the event, actually we will get an alert.

button.addEventListener("keydown", (e)=>{
    console.log(e.key)
})

eventsbubbling.html -> 
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Event Bubbling.</title>
    <style>
      .child {
        background-color: aliceblue;
        border: 2px solid black;
        padding: 14px;
        margin: 14px;
        cursor: pointer;
      }
      .childContainer {
        background-color: beige;
        margin: 14px;
        padding: 14px;
      }
      .container {
        background-color: yellow;
        margin: 14px;
        padding: 14px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <section class="childContainer">
        <div class="child">I am a child.</div>
      </section>
    </div>
    <script>
      // What we are trying to do is, whenever someone clicks on child, then it gives an alert that child is clicked or something like that.

      //   document.querySelector(".child").addEventListener("click", () => {
      //     alert("Don't hack us by doing right click okay.");
      //   });
      document.querySelector(".child").addEventListener("click", (e) => {
        e.stopPropagation();
        alert("Don't hack us by doing right click okay.");
      });
      document
        .querySelector(".childContainer")
        .addEventListener("click", () => {
          alert("childContainer was clicked.");
        });
      document.querySelector(".container").addEventListener("click", (e) => {
        e.stopPropagation();
        alert("Container was clicked.");
      });
      function getRandomColor() {
        let val1 = Math.ceil(0 + Math.random() * 255);
        let val2 = Math.ceil(0 + Math.random() * 255);
        let val3 = Math.ceil(0 + Math.random() * 255);
        return `rgb(${val1}, ${val2}, ${val3})`;
      }
      let a = setInterval(() => {
        document.querySelector(".childContainer").style.background =
          getRandomColor();
      }, 3000);
      console.log(a);
      // Here in console, after output: 1 will be the output. But If we want to stop this. We can use clearInterval() -> This function in order to stop that set interval. The parameter of clearInterval() -> This will take the output of let a (variable) and then it will close the set interval.

      //   let b = setTimeout(() => {
      //     document.querySelector(".childContainer").style.background =
      //       getRandomColor();
      //   }, 1000);
      // The theory of setTImeout function is writtern below.
      // To cancel setTimeout() we use -> clearTimeout();
    </script>
  </body>
</html>

<!-- Within Container, we have child container, within child container we have child. MEans.
Container -> Child_Container -> Child.
So, When I will click on child. Then automatically this event will get bubble. MEans then child property will get bubbled to childContainer and Container also. So, This concept is known as Event Bubbling. -->

<!-- What If we do not want event bubbling. Here, We can stop Propagation. For that we can pass e (event) as parameter and the bubbling will get stop. You can see in above code. -->

<!-- Set Interval: If I want that something must happens repetetively, then we can use set interval. setInterval is a function, which takes a function, a function that takes a function and time (in millisecond).

    setInterval(()=>{
        document.querySelector(".childContainer").style.background = "red";
    }, 3000) -> After 3 seconds we will get to know that what is happening.
-->

<!-- clearInterval() -> This function will take the output of above set interval function as parameter and then it will stop the execution of setInterval() function. -->

<!-- setTimeout(() => {
    document.querySelector(".childContainer").style.background = getRandomColor();
}, 1000) , setTimeout() function, runs single time after a single execution.-->

<!-- To stop the execution of setTimeout() we use clearTimeout(). -->

Video 75th -> 
3 Files are there.
1. Index.html
2. script.js
3. promises.js

1. Index.html
<!-- Call back functions are used when we want to call a function. Once a function executes. Promise is also a important concept under Async. -->
<!-- Call BAck function is a function which goes under a function and then runs. We can pass callback function to a function. -->

<!-- Asynchronous nature of JavaScript: Some functions which are asynchronour in nature, they are delayed to be executed. For example:

    1. console.log("Harry is Hacker")
    2. console.log("Devanshu is also a Heker")
    3.  setTimeout(() => {
            console.log("I am inside timout.")
        }, 3000)
    4. console.log("The end")

    Above, we have seen a code, here: We might think that all of these will get executed in a sequential order. But that is not always true because, We have, a function setTimeout() which will run after 3 seconds. But script will not stop for 3 seconds. It will excute in order 1->2->4->3.
    
    This is an example of asynchronous behaviour of JavaScript.
-->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script src="promise.js"></script>
</body>
</html>

2. // We can pass function as a variable to another function, that is what is the concept of callback.

const fn = () => {
    console.log("Nothing")
}
const callback = (arg, fn) => {
    console.log(arg)
    fn()
}
const loadScript = (src, callback) => {
    let sc = document.createElement("script");
    sc.src = src;
    sc.onload = callback("Harry");
    document.head.append(sc)
}

loadScript("https://cdnjs.cloudflare.com/ajax/libs/prism/9000.0.1/prism.min.js", callback )

// After Some time when then code will become very big, managing it will become very difficult, so for that reason we use promises.

// Promises are the solution to call backs. Means here we are performing call backs, means first do this, then do that. But what if our script will wait for the code, for line by line execution. This is now a good thing.

3. promise.js.

// Promises are the solution to callbacks.
// Promise means promise of code execution.

let prom1 = new Promise((resolve, reject) => {
    let a = Math.random();
    if(a < 0.5) {
        reject("No random number was not supporting you.")
    }
    else {
        setTimeout(()=>{
            console.log("Yes, I am done.")
            resolve("Devanshu")
        }, 3000)
    }
})

prom1.then(()=>{
    console.log(a) // When prom1 get resolved then the value of a will get printed.
}).catch((err)=>{
    console.log(err) // We catch the error and the print it accordingly.
})
// new Promise which is a promise constructor. It receives two things, when to be resolved and when to be rejected.

// promise is also lot of types.
// 1. promise.all.
// 2. promise.allSettled(promises): Whatever the result is, whether it is resovle, reject we do not care. But both the promises are working then what we can use is -> allsettle.
