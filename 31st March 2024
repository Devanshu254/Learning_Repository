I have done coding questions as well as I have also made a project.
Q1.
class Solution {
public:
    vector<int> getConcatenation(vector<int>& nums) {
        int n = nums.size();
        vector<int> arr(nums);
        for(int i=0;i<n;i++) {
            arr.push_back(nums[i]);
        }
        return arr;
    }
};
Q2.
class Solution {
public:
    vector<int> buildArray(vector<int>& nums) {
        vector<int> ans;
        for(int i=0;i<nums.size();i++) {
            ans.push_back(nums[nums[i]]);
        }
        return ans;
    }
};
Q3.
class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        int count = 0;
        for(int i=0;i<nums.size();i++) {
            for(int j=0;j<nums.size();j++)
            if(nums[i] == nums[j] && i<j) {
                count++;
            }
        }
        return count;
    }
};
Q4. 
class Solution {
public:
    int finalValueAfterOperations(vector<string>& operations) {
        int y = 0;
        for(int i=0;i<operations.size();i++) {
            if(operations[i] == "--X") {
                y = y-1;
            }else if(operations[i] == "X--") {
                y = y-1;
            }else if(operations[i] == "++X") {
                y = y+1;
            }else {
                y = y+1;
            }
        }
        return y;
    }
};
Q5.
class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {
        vector<int> ans;
        for(int i=0;i<n;i++) {
            ans.push_back(nums[i]);
            ans.push_back(nums[i+n]);
        }
        return ans;
    }
};
Q6. 
class Solution {
public:
    vector<int> findWordsContaining(vector<string>& words, char x) {
        vector<int> ans;
        for(int i=0;i<words.size();i++) {
            if(words[i].find(x) != string::npos) {
                ans.push_back(i);
            }
        }
        return ans;
    }
};
