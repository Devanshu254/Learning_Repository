class Solution {
public:
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
        int n = nums.size();
        int small = 0;
        vector<int> result;
        for(int i=0;i<n;i++) {
            for(int j=0;j<n;j++) {
                if(j!=i) {
                    if(nums[i] > nums[j]) {
                        small++;
                    }
                }
            }
            result.push_back(small);
            small = 0;
        }
        return result;
    }
};

Q2. 
class Solution {
public:
    vector<int> runningSum(vector<int>& nums) {
        int n = nums.size();
        for(int i=1;i<n;i++) {
            nums[i] = nums[i] + nums[i-1];
        }
        return nums;
    }
};

Q3. 
class Solution {
public:
    int countPairs(vector<int>& nums, int target) {
        int n = nums.size();
        int count = 0;
        for(int i=0;i<n;i++) {
            for(int j = i+1;j<n;j++)
            if(((nums[i] + nums[j]) < target)) {
                count++;
            }
        }
        return count;
    }
};

Q4. 
class Solution {
public:
    vector<bool> kidsWithCandies(vector<int>& candies, int extraCandies) {
        int n = candies.size();
        int greatestCandie = candies[0];
        for(int i=0;i<n;i++) {
            if(candies[i] > greatestCandie) {
                greatestCandie = candies[i];
            }
        }
        vector<bool> boolean_array;
        for(int i=0;i<n;i++) {
            if((candies[i] + extraCandies) >= greatestCandie) {
                boolean_array.push_back(true);
            }else {
                boolean_array.push_back(false);
            }
        }
        return boolean_array;
    }
};
